<templateSet group="PHP">
  <template name="fore" value="foreach ($ITERABLE$ as $$$VAR_VALUE$) {&#10;    $END$&#10;}&#10;" description="foreach(iterable_expr as $value) {...}" toReformat="true" toShortenFQNames="true">
    <variable name="ITERABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="forek" value="foreach ($ITERABLE$ as $$$VAR_KEY$ =&gt; $$$VAR_VALUE$) {&#10;    $END$&#10;}&#10;" description="foreach(iterable_expr as $key =&gt; $value) {...}" toReformat="true" toShortenFQNames="true">
    <variable name="ITERABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="pubf" value="public function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="public function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="pubsf" value="public static function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="public static function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="prof" value="protected function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="protected function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="prosf" value="protected static function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="protected static function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="prif" value="private function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="private function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="prisf" value="private static function $NAME$($PARAMETERS$){&#10;    $END$&#10;}" description="private static function" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="_c" value="public function __construct($PARAMETERS$)&#10;{&#10;    $END$&#10;}" description="Constructor" toReformat="false" toShortenFQNames="true">
    <variable name="PARAMETERS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="_t" value="/**&#10; * @test&#10; */&#10;public function it_$DOES$()&#10;{&#10;    $END$&#10;}" description="Test" toReformat="false" toShortenFQNames="true">
    <variable name="DOES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="_a" value="static::assert$TYPE$($END$);" description="assert" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="" defaultValue="Same" alwaysStopAt="true" />
    <context>
      <option name="PHP Expression" value="true" />
    </context>
  </template>
  <template name="tc" value="try {&#10;    $TRY$&#10;} catch($EXCEPTION$ $e) {&#10;    $END$&#10;}" description="try/catch statement" toReformat="false" toShortenFQNames="true">
    <variable name="TRY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EXCEPTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>